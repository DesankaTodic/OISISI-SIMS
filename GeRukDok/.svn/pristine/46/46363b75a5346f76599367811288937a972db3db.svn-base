package view;



import java.awt.AlphaComposite;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import java.util.Iterator;

import javax.swing.JInternalFrame;
import javax.swing.JPanel;

import view.painters.ElementPainter;
import model.elements.DocumentElement;
import model.workspace.Document;
import event.UpdateEvent;
import event.UpdateListener;
import model.workspace.DocumentModel;


@SuppressWarnings("serial")
public class DocumentView extends JInternalFrame implements UpdateListener{

	private DocumentModel model=new DocumentModel();
	static int openFrameCount = 0;
	
	// služe nam za odreðivanje pozicije unutrašnjeg prozora
	static final int xOffset = 30, yOffset = 30;
	
	private Document document;
	//framework nam predstavlja radnu povrsinu za dijagram
 
	private  JPanel framework;
	
	
	
	public DocumentView() {
		
		super("" ,
		          true, //resizable
		          true, //closable
		          true, //maximizable
		          true);//iconifiable
		++openFrameCount;
		setLocation(xOffset*openFrameCount, yOffset*openFrameCount);
		setIconifiable(true);
		setClosable(true);
		
		
		setSize(400,400);
 	    setVisible(true);
		
 	    framework=new Framework();
 	    framework.setCursor(new Cursor(Cursor.HAND_CURSOR));
		framework.setBackground(Color.WHITE);
		getContentPane().add(framework,BorderLayout.CENTER);
		DocumentController c=new DocumentController();
		framework.addMouseListener(c);
		framework.addMouseMotionListener(c);

		
		
		
		
	}
	
	public void setDocument(Document document){
		this.document = document; 
		this.setName(document.getName());
		this.document.getModel().addUpdateListener(this);
		setTitle(document.getName());

	}
	public DocumentModel getModel() {
		return model;
	}
	



	public Document getDocument() {
		return document;
	}

	
	
	
	private class DocumentController extends MouseAdapter implements MouseMotionListener{

		public void mousePressed(MouseEvent e) {
			   document.getStateManager().getCurrentState().mousePressed(e);
		}

		public void mouseReleased(MouseEvent e) {
			   document.getStateManager().getCurrentState().mouseReleased(e);
		}
		
		public void mouseDragged(MouseEvent e ){
			   document.getStateManager().getCurrentState().mouseDragged(e);
		}
		
	}




	public void updatePerformed(UpdateEvent e) {
		repaint();
		
	}
	
	@SuppressWarnings("serial")
	private class Framework extends JPanel{
		protected void paintComponent(Graphics g) {
			super.paintComponent(g);
			
			Graphics2D g2 = (Graphics2D) g;
			g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.8f));
			
			
			g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
			Iterator<DocumentElement> it = document.getModel().getDeviceIterator();
			while(it.hasNext()){
				DocumentElement d = (DocumentElement) it.next();
				ElementPainter paint =  d.getPainter();
				paint.paint(g2, d);
				
			}
		}

		}





	}






